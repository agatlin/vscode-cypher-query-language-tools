{
	"fileTypes": [
		"cql",
		"cyp",
		"cypher"
	],
	"name": "Cypher",
	"patterns": [
		{
			"include": "#template-substitution-element"
		},
		{
			"include": "#comments"
		},
		{
			"include": "#constants"
		},
		{
			"include": "#keywords"
		},
		{
			"include": "#functions"
		},
		{
			"include": "#operators"
		},
		{
			"include": "#identifiers"
		},
		{
			"include": "#properties_literal"
		},
		{
			"include": "#numbers"
		},
		{
			"include": "#strings"
		}
	],
	"repository": {
		"comments": {
			"patterns": [
				{
					"match": "\/\/.*$\\n?",
					"name": "comment.line.double-slash.cypher"
				}
			]
		},
		"constants": {
			"patterns": [
				{
					"match": "(?i)\\bTRUE|FALSE\\b",
					"name": "constant.language.bool.cypher"
				},
				{
					"match": "(?i)\\bNULL\\b",
					"name": "constant.language.missing.cypher"
				}
			]
		},
		"functions": {
			"patterns": [
				{
					"comment": "List of Cypher built-in functions from http:\/\/docs.neo4j.org\/chunked\/milestone\/query-function.html",
					"match": "(?i)\\b((NOT)(?=\\s*\\()|IS\\s+NULL|IS\\s+NOT\\s+NULL)",
					"name": "keyword.control.function.boolean.cypher"
				},
				{
					"comment": "List of Cypher built-in functions from http:\/\/docs.neo4j.org\/chunked\/milestone\/query-function.html",
					"match": "(?i)\\b(ALL|ANY|NONE|SINGLE)(?=\\s*\\()",
					"name": "support.function.predicate.cypher"
				},
				{
					"comment": "List of Cypher built-in functions from http:\/\/docs.neo4j.org\/chunked\/milestone\/query-function.html",
					"match": "(?i)\\b(LENGTH|TYPE|ID|COALESCE|HEAD|LAST|TIMESTAMP|STARTNODE|ENDNODE|TOINT|TOFLOAT)(?=\\s*\\()",
					"name": "support.function.scalar.cypher"
				},
				{
					"comment": "List of Cypher built-in functions from http:\/\/docs.neo4j.org\/chunked\/milestone\/query-function.html",
					"match": "(?i)\\b(NODES|RELATIONSHIPS|LABELS|EXTRACT|FILTER|TAIL|RANGE|REDUCE)(?=\\s*\\()",
					"name": "support.function.collection.cypher"
				},
				{
					"comment": "List of Cypher built-in functions from http:\/\/docs.neo4j.org\/chunked\/milestone\/query-function.html",
					"match": "(?i)\\b(ABS|ACOS|ASIN|ATAN|ATAN2|COS|COT|DEGREES|E|EXP|FLOOR|HAVERSIN|LOG|LOG10|PI|RADIANS|RAND|ROUND|SIGN|SIN|SQRT|TAN)(?=\\s*\\()",
					"name": "support.function.math.cypher"
				},
				{
					"comment": "List of Cypher built-in functions from http:\/\/docs.neo4j.org\/chunked\/milestone\/query-function.html",
					"match": "(?i)\\b(COUNT|sum|avg|max|min|stdev|stdevp|percentileDisc|percentileCont|collect)(?=\\s*\\()",
					"name": "support.function.aggregation.cypher"
				},
				{
					"comment": "List of Cypher built-in functions from http:\/\/docs.neo4j.org\/chunked\/milestone\/query-function.html",
					"match": "(?i)\\b(STR|REPLACE|SUBSTRING|LEFT|RIGHT|LTRIM|RTRIM|TRIM|LOWER|UPPER|SPLIT)(?=\\s*\\()",
					"name": "support.function.string.cypher"
				}
			]
		},
		"template-substitution-element": {
			"name": "meta.template.expression.ts",
			"begin": "\\$\\{",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.template-expression.begin.ts"
				}
			},
			"end": "\\}",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.template-expression.end.ts"
				}
			},
			"patterns": [
				{
					"include": "source.ts"
				}
			],
			"contentName": "meta.embedded.line.ts"
		},
		"identifiers": {
			"patterns": [
				{
					"match": "(\\{)([a-zA-Z_][a-zA-Z0-9_]*)(\\})",
					"captures": {
						"1": {
							"name": "punctuation.definition.template-expression.begin"
						},
						"2": {
							"name": "variable"
						},
						"3": {
							"name": "punctuation.definition.template-expression.end"
						}
					}
				},
				{
					"match": "\\\\?`.+?\\\\?`",
					"name": "variable.other.quoted-identifier.cypher"
				},
				{
					"match": "[a-zA-Z_][a-zA-Z0-9_]*",
					"name": "variable.other.cypher"
				},
				{
					"match": "(:\\s*)([a-zA-Z_][a-zA-Z0-9_]*)",
					"captures": {
						"1": {
							"name": "keyword.operator.identifier.separator.cypher"
						},
						"2": {
							"name": "entity.name.type.cypher"
						}
					}
				}
			]
		},
		"keywords": {
			"patterns": [
				{
					"match": "(?i)\\b(START|MATCH|WHERE|RETURN|UNION|FOREACH|WITH|LIMIT|SKIP|UNWIND|HAS|ORDER\\s+BY)\\b",
					"name": "keyword.control.clause.cypher"
				},
				{
					"match": "(?i)\\b(AS|DISTINCT|OPTIONAL)\\b",
					"name": "keyword.control.other.cypher"
				},
				{
					"match": "(?i)\\b(ELSE|END|THEN|CASE|WHEN)\\b",
					"name": "keyword.control.case.cypher"
				},
				{
					"match": "(?i)\\b(FIELDTERMINATOR|USING\\s+PERIODIC\\s+COMMIT|HEADERS|LOAD\\s+CSV|FROM)\\b",
					"name": "keyword.data.import.cypher"
				},
				{
					"match": "(?i)\\b(USING\\s+INDEX|CREATE\\s+INDEX\\s+ON|DROP\\s+INDEX\\s+ON|CREATE\\s+CONSTRAINT\\s+ON|DROP\\s+CONSTRAINT\\s+ON)\\b",
					"name": "keyword.other.indexes.cypher"
				},
				{
					"match": "(?i)\\b(MERGE|DELETE|DETACH DELETE|SET|REMOVE|ON\\s+CREATE|ON\\s+MATCH|CREATE\\s+UNIQUE|CREATE)\\b",
					"name": "keyword.data.definition.cypher keyword.control.clause.cypher"
				},
				{
					"match": "(?i)\\b(DESC|ASC)\\b",
					"name": "keyword.other.order.cypher"
				},
				{
					"begin": "(?i)\\b(node|relationship|rel)((:)([a-zA-Z_-][a-zA-Z0-9_]*))?(?=\\s*\\()",
					"beginCaptures": {
						"1": {
							"name": "support.class.starting-functions-point.cypher"
						},
						"2": {
							"name": "keyword.control.index-seperator.cypher"
						},
						"3": {
							"name": "keyword.control.index-seperator.cypher"
						},
						"4": {
							"name": "support.class.index.cypher"
						}
					},
					"end": "\\)",
					"name": "source.starting-functions.cypher",
					"patterns": [
						{
							"match": "((?:\\\\?`.+?\\\\?`)|(?:[a-zA-Z_][a-zA-Z0-9_]*))",
							"name": "variable.parameter.relationship-name.cypher"
						},
						{
							"match": "(\\*)",
							"name": "keyword.control.starting-function-params.cypher"
						},
						{
							"include": "#comments"
						},
						{
							"include": "#numbers"
						},
						{
							"include": "#strings"
						}
					]
				}
			]
		},
		"numbers": {
			"patterns": [
				{
					"match": "\\b\\d+(\\.\\d+)?\\b",
					"name": "constant.numeric.cypher"
				}
			]
		},
		"operators": {
			"patterns": [
				{
					"match": "(\\+|\\-|\\\/|\\*|\\%|\\?|!)",
					"name": "keyword.operator.math.cypher"
				},
				{
					"match": "(<=|=>|<>|<|>|=~|=)",
					"name": "keyword.operator.compare.cypher"
				},
				{
					"match": "(?i)\\b(OR|AND|XOR|IS)\\b",
					"name": "keyword.operator.logical.cypher"
				},
				{
					"match": "(?i)\\b(IN)\\b",
					"name": "keyword.operator.in.cypher"
				}
			]
		},
		"properties_literal": {
			"patterns": [
				{
					"begin": "{",
					"beginCaptures": [
						{
							"name": "punctuation.definition.block.cypher"
						}
					],
					"end": "}",
					"endCaptures": [
						{
							"name": "punctuation.definition.block.cypher"
						}
					],
					"name": "source.cypher",
					"patterns": [
						{
							"match": ",",
							"name": "punctuation.separator.key-value.cypher"
						},
						{
							"match": "([a-zA-Z_][a-zA-Z0-9_]*)(:)",
							"captures": {
								"1": {
									"name": "entity.name.tag"
								},
								"2": {
									"name": "punctuation.separator.key-value.cypher"
								}
							}
						},
						{
							"include": "#comments"
						},
						{
							"include": "#constants"
						},
						{
							"include": "#functions"
						},
						{
							"include": "#operators"
						},
						{
							"include": "#template-substitution-element"
						},
						{
							"include": "#identifiers"
						},
						{
							"include": "#numbers"
						},
						{
							"include": "#strings"
						}
					]
				}
			]
		},
		"string_escape": {
			"captures": {
				"2": {
					"name": "string.quoted.double.cypher"
				}
			},
			"match": "(\\\\\\\\|\\\\[tbnrf])|(\\\\'|\\\\\")",
			"name": "constant.character.escape.cypher"
		},
		"strings": {
			"patterns": [
				{
					"begin": "'",
					"end": "'",
					"name": "string.quoted.single.cypher",
					"patterns": [
						{
							"include": "#string_escape"
						}
					]
				},
				{
					"begin": "\"",
					"end": "\"",
					"name": "string.quoted.double.cypher",
					"patterns": [
						{
							"include": "#string_escape"
						}
					]
				}
			]
		}
	},
	"scopeName": "source.cypher"
}
